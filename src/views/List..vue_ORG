<template>
  <div class='list'>
    <div>
      <v-toolbar flat color='gray'>
        <v-toolbar-title>ユーザー管理</v-toolbar-title>
        <v-divider class='mx-3' inset vertical></v-divider>

        <!-- リスト更新ボタン -->
        <v-icon @click='refresh()'>refresh</v-icon>

        <v-spacer></v-spacer>
        <v-text-field v-model='search' append-icon='search' label='Search' single-line hide-details></v-text-field>

        <!-- ユーザー追加ボタン フォームは下部 -->
        <v-btn fab dark small color='dark' class='mb-2' @click='dialog=true'>
          <v-icon dark>add</v-icon>
        </v-btn>
      </v-toolbar>

      <!-- データテーブル部分
        rows-per-page-text='' 1ページあたり件数テキストの非表示
        :rows-per-page-items='[]' 1ページあたり件数セレクトの非表示
      -->
      <v-data-table
        :headers='headers'
        :items='userList'
        :search='search'
        rows-per-page-text
        :rows-per-page-items='[]'
        class='elevation-1'
        v-show='!deleteDialog'
      >
        <!-- テーブルボディ -->
        <template slot='items' slot-scope='props'>
          <td class='text-xs-center'>{{ props.item.Id }}</td>
          <td class='text-xs-center'>{{ props.item.Name }}</td>
          <td class='text-xs-center'>{{ props.item.SpeakingName }}</td>
          <td class='justify-center layout px-0'>
            <!-- 編集ボタン -->
            <v-icon class='mr-2' @click='editUser(props.item.Id)'>edit</v-icon>
            <!-- 削除ボタン -->
            <v-icon @click='openDeleteDialog(props.item.Id)'>delete</v-icon>
          </td>
        </template>

        <!-- 検索結果なし -->
        <v-alert slot='no-results' :value='true' color='error' icon='warning'>'{{ search }}' の検索結果なし</v-alert>
        <!-- データなしの時の表示 -->
        <template slot='no-data'>No Data</template>

        <!-- フッターの件数表示 -->
        <template
          slot='pageText'
          slot-scope='props'
        >{{ props.itemsLength }} 件中 {{ props.pageStart }} 件目 〜 {{ props.pageStop }} 件目</template>
      </v-data-table>

      <!-- 入力ダイアログのレイアウト -->
      <v-layout row justify-center>
        <v-dialog v-model='dialog' lazy persistent max-width='600px'>
          <v-form v-model='valid' lazy-validation>
            <v-card>
              <v-card-title>
                <span class='headline'>{{ formTitle }}</span>
              </v-card-title>
              <v-card-text>
                <v-container grid-list-md>
                  <v-layout wrap>
                    <v-flex xs12 sm6 md4>
                      <v-text-field
                        v-model='selectedUser.Name'
                        label='名前 (*)'
                        :rules='nameRules'
                        :counter='16'
                        required
                      ></v-text-field>
                    </v-flex>
                    <v-flex xs12>
                      <v-text-field
                        v-model='selectedUser.SpeakingName'
                        label='読み (*)'
                        :rules='speakingNameRules'
                        required
                      ></v-text-field>
                    </v-flex>
                  </v-layout>
                </v-container>
              </v-card-text>
              <v-card-actions>
                <v-spacer></v-spacer>
                <v-btn color='blue darken-1' flat @click='save' :disabled='!valid'>保存</v-btn>
                <v-btn color='blue darken-1' flat @click='close'>キャンセル</v-btn>
              </v-card-actions>
            </v-card>
          </v-form>
        </v-dialog>
      </v-layout>

      <!-- 削除確認ダイアログのレイアウト -->
      <v-layout row justify-center>
        <v-dialog v-model='deleteDialog' persistent max-width='290px'>
          <v-card-text>削除しますか？</v-card-text>
          <v-card-actions>
            <v-spacer></v-spacer>
            <v-btn color='blue darken-1' flat @click='deleteUser'>削除</v-btn>
            <v-btn color='blue darken-1' flat @click='close'>キャンセル</v-btn>
          </v-card-actions>
        </v-dialog>
      </v-layout>
    </div>
  </div>
</template>

<script lang='ts'>
import 'functions';
import 'firebase/functions/';
import axios from 'axios';

export default {
  name: 'list',
  data() {
    return {
      // ユーザー一覧が入る配列
      userList: [],
      // テーブルヘッダ
      headers: [
        { text: 'ID', align: 'center', value: 'Id' },
        { text: '名前', align: 'center', value: 'Name' },
        { text: '読み', align: 'center', value: 'SpeakingName' },
        { text: '操作', align: 'center', value: 'action', sortable: false },
      ],
      // 選択中のレコードの値
      selectedUser: {
        Id: -1,
        Name: '',
        SpeakingName: '',
      },
      // レコードの初期値
      defaultValue: {
        Id: -1,
        Name: '',
        SpeakingName: '',
      },
      search: '', // フィルタリング検索キーワード
      dialog: false, // 新規＆更新入力フォーム
      deleteDialog: false, // 削除確認ダイアログ
      valid: false, // バリデーション結果
      nameRules: [
        (v: any) => !!v || '名前は必須です',
        (v: any) => v.length <= 16 || '名前は16文字までです',
      ],
      speakingNameRules: [
        (v: any) => !!v || '読みは必須です',
        (v: any) => v.length <= 16 || '読みは16文字までです',
      ],
    }
  },
  methods: {
    // ユーザー一覧
    indexUsers() {
      console.log('ユーザー一覧');
      // const getTeams = firebase.functions().httpsCallable('getTeams');
      // console.log('ユーザー一覧: getTeams: ' + getTeams);
      // const response = getTeams();
      // console.log('ユーザー一覧: response: ' + response);
      // this.userList = response;
      // console.log('ユーザー一覧: ' + this.userList.length);
      // this.userList = [];
      // console.log('ユーザー一覧: ' + this.userList.length);
      // this.userList = {'Id': '111', ''Name': '一', 'SpeakingName': '111 San'};
      // console.log('ユーザー一覧: ' + this.userList.length);
      this.userList = [];
      axios
        .get('http://localhost:5000/getTeams')
        .then((response) => {
          console.log('ユーザー一覧  response: ' + response);
          console.log('ユーザー一覧  response.data: ' + response.data);
          this.userList = response.data;
          console.log('Index : record num=' + this.userList.length);
        })
        .catch((error) => {
          console.log('Error : ' + error);
        });
    },
    // ユーザー作成
    createUser(userInfo: any) {
      console.log('ユーザー作成');
    },
    // ユーザー編集(読み出し)
    editUser(id: number) {
      console.log('ユーザー編集(読み出し)');
    },
    // ユーザー編集(書き込み)
    updateUser(userInfo: any) {
      console.log('ユーザー編集(書き込み)');
    },
    // 削除ダイアログ
    openDeleteDialog(id: number) {
      console.log('削除ダイアログ');

      // this.selectedUser.Id = Id;
      // this.deleteDialog = true;
    },
    // ユーザー削除
    deleteUser() {
      console.log('ユーザー削除 : id=' + this.selectedUser.Id);
    },
    // 一覧の最新化
    refresh() {
      console.log('一覧の最新化');
      this.indexUsers();
    },
    // ダイアログの保存ボタン
    save() {
      console.log('ダイアログの保存ボタン');
      if (this.selectedUser.Id === -1) {
        // 作成
        this.createUser(this.selectedUser);
      } else {
        // 更新
        this.updateUser(this.selectedUser);
      }
      this.close();
    },
    // ダイアログのキャンセルボタン
    close() {
      console.log('ダイアログのキャンセルボタン');
      this.dialog = false;
      this.deleteDialog = false;
      setTimeout(() => {
        this.selectedUser = Object.assign({}, this.defaultValue);
      }, 500);
    },
  },
  computed: {
    // ダイアログのタイトルを作成と更新で使い分ける
    formTitle(): string {
      return this.selectedUser.Id === -1
        ? '新規ユーザー情報'
        : 'ユーザー情報の編集';
    },
  },
  mounted() {
    this.indexUsers();
  },
};
</script>

<style scoped>
</style>
